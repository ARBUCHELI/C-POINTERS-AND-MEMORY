# POINTERS: LESSON
------------------

* Memory in C
-------------
2 min
For a program to execute, it must use some of the computer’s resources such as CPU, RAM, IO, or other hardware. Deciding how and at what capacity to use these resources is the job of the 
underlying operating system. One of the most important of these resources is memory, more specifically: the temporary memory used for program execution which is called random access 
memory (RAM). When a program executes, the operating system reserves a section of the computer’s physical RAM to be used exclusively by the program. The fundamental unit of this memory is 
a byte. As you learned previously, all variables are simply a collection of some number of bytes: an int is four bytes, a double is eight bytes, and so on. The allocated section of RAM is 
simply a block of however many bytes the program needs (if available, of course).

As you can see, in this block of memory to the right, every byte has an associated address numbered using the hexadecimal numbering system. For example, a byte of memory could be located 
at address 0x200 and the immediate byte next to it is located at address 0x201.

Every programming language has a different policy regarding the direct access and manipulation of a byte in memory; some allow it, some do not. C is one of the languages that allow such 
operations through the use of a pointer, and we will see how in this lesson.

At first glance, pointers may appear to be an overcomplicated way to work with variables, and for such simple examples meant to illustrate basic principles, this is true. However, the 
real value of pointers becomes apparent in more complex applications, such as working with data structures or embedded systems (think robots and microchips). Examples of these are well 
beyond the scope of this introductory tutorial. For now, just familiarize yourself with these ideas such that you may recall them when you need to!

* Instructions
--------------
Move on when you’re ready to learn more!

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Pointers
----------
9 min
In C, a byte of memory can be accessed using a pointer. A pointer containing the address of a variable is said to “point” to that variable.

Recall that when you declare a variable, a contiguous block of bytes is reserved in memory. A pointer to a variable is the address of the first of these bytes. A pointer can be created 
for every type of variable: be it primitive (for example int, char, or double), a custom data type created using a struct (we’ll cover those in a later lesson), or even another pointer. 
The syntax of a pointer is the following:

dataType* nameOfPointer;

or

dataType *nameOfPointer;

For example, to declare a pointer variable (called ptr) that points to an int, you would write:

int* ptr; // Pointer to an int
int *ptr; // Same as above but different style.

In this case, ptr stores the address of the first byte of a block of memory containing an int. To print this address to the screen, printf() is used like so:

int x; // Create an int variable
int* ptr = &x; // Pointer to that int (we'll dive into what "&" means in the coming exercises)
printf("%p", ptr); // %p needed to instruct printf() that ptr is of type pointer

This will output a hexadecimal integer that represents the address in memory that is storing a variable of type int. This number will be different every time the program is executed.

If we had another pointer named ptr2 that doesn’t point to a declared variable, printing it will result in (nil) rather than a hexadecimal address:

int* ptr2;
printf("%p", ptr2); // Prints: (nil)

In later exercises, we will see how to use pointers.

* Instructions
--------------
Checkpoint 1 Passed
1.
Create a double variable named dblVar.

Checkpoint 2 Passed
2.
Create a pointer variable called dblPtr that points to dblVar.


Hint
Creating a pointer that points to a variable of type int is created like so:

int intVar = 10;
int* intPtr = &intVar;

In this case, dblPtr should point to a variable of type double.

Checkpoint 3 Passed
3.
Print the address stored in dblPtr to the screen.


Hint
Printing a pointer is done like so:

printf("%p", ptr);

exercise2.c
-----------
#include<stdio.h>

int main() {
  // Checkpoint 1 code goes here.
  double dblVar;
  // Checkpoint 2 code goes here.
  double* dblPtr = &dblVar;
  // Checkpoint 3 code goes here.
  printf("%p", dblPtr);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The Reference Operator
------------------------
8 min
Since pointers are used to store the memory address of a variable, we need to obtain this address first. This is done by using the reference operator (&). The syntax for this is:

&variableName;

Consider the following piece of code:

int x = 9;
printf("%p", &x);

This will output to the screen the memory address of the variable x. To assign an address to a pointer, the following syntax is used:

pointer = &variableName; 

Consider the following example:

int x = 727; // Declare variable x
int* ptr = &x; // Declare a pointer to an int variable and assign to it the address of variable x
printf("%p\n", &x); // Print the address of x
printf("%p\n", ptr); // Print the address pointed to by ptr 

The code above declares an integer variable x and an int pointer variable ptr. The pointer is then assigned the memory of the variable x. The last two printf() statements print this 
address; both lines will output the same hexadecimal number as they both refer to the same address in memory.

The address a pointer contains is not constant. A pointer may be reassigned to a new address so long as type consistency is maintained (e.g., int pointer points to a variable of type 
int). Consider this example:

int* ptr; // Declare pointer to an integer type

int x = 3; // Declare variable x
ptr = &x; // Assigns memory address of variable x to the pointer
printf("%p\n", ptr); // Prints address of variable x 

int y = 14; // Declare variable y
ptr = &y; // Reassigns the pointer to the memory address of variable y
printf("%p\n", ptr); // Prints address of variable y

* Instructions
--------------
Checkpoint 1 Passed
1.
Declare a pointer to a double called dblPtr and assign to it the address of variable g.


Hint
Recall that declaring a pointer to an int and assigning it the address of an int variable is done like so:

int x = 727; // Declare variable x
int* ptr = &x; // Declare a pointer to an int variable and assign to it the address of variable x

Apply this concept to the double type. The variable is already given to you.

Checkpoint 2 Passed
2.
Print the address of variable g.


Hint
The address of variable g is currently stored in dblPtr, so print that!

Recall:

printf(“%p\n”, pointerName);

Checkpoint 3 Passed
3.
Reassign dblPtr to the address of the variable pi.


Hint
Recall this example:

int* ptr; // Declare pointer to an integer type

int x = 3; // Declare variable x
ptr = &x; // Assigns memory address of variable x to the pointer
printf("%p\n", ptr); // Prints address of variable x 

int y = 14; // Declare variable y
ptr = &y; // Reassigns the pointer to the memory address of variable y
printf("%p\n", ptr); // Prints address of variable y

The same concept applies here!

exercise3.c
-----------
#include<stdio.h>

int main() {
  
  double g = 9.81;
  double pi = 3.14;
  
  // Checkpoint 1 code goes here.
  double *dblPtr = &g;
  // Checkpoint 2 code goes here.
  printf("%p\n", dblPtr);
  // Checkpoint 3 code goes here.
  dblPtr = &pi;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The Dereference Operator
--------------------------
9 min
If we have a pointer that is assigned the memory address of a variable, eventually we will need to access the data that it contains so we can use or manipulate it. The data contained in 
the memory address pointed to by a pointer can be accessed using the dereference operator (*). The syntax is as follows:

*pointerName;

Once a pointer is dereferenced, we can use its contents as we would a regular variable. It is important not to confuse this operator with the multiplication operator as they are 
represented by the same symbol!

Here is a full example:

int x = 4;
int* ptr = &x; // ptr stores the memory address of variable x

int y = *ptr; // Declare variable y and assign to it the data stored in memory pointed to by ptr, which is the value of variable x

printf("%i", y);

The code above illustrates how to obtain the data stored in the address pointed to by ptr by dereferencing it. Since ptr stores the address of variable x, the value obtained by 
dereferencing ptr is the value of x. If the value of a dereferenced pointer is changed, the value of the corresponding variable will change in the same way:

int x = 4;
int* ptr = &x;

*ptr = 200; // The data in the memory address pointed to by ptr now contains the value 200

printf("%i", x); // This will output 200

The code above declares a variable x with an initial value of four. The pointer ptr points to the memory address of x. *ptr = 200 changes the data at the memory address stored in ptr to 
200. Since this memory address is that of the variable x, the value of x now changes from four to 200.

* Instructions
--------------
Checkpoint 1 Passed
1.
Print the data stored in the memory address that ptr is pointing to.


Hint
Dereferencing the pointer retrieves the data stored in the memory address.

Dereferencing a pointer is done like this:

*pointerName

Pseudocode for printing an int value:

printf(“%i\n”, value to be printed);

Checkpoint 2 Passed
2.
Change the value contained in the memory address pointed to by ptr from 2000 to 961.


Hint
Take a look at this piece of code that changes a value using a pointer:

int x = 17;
int* ptr = &x;

*ptr = 26; // The data in the memory address pointed to by ptr now contains the value 26

exercise4.c
-----------
#include<stdio.h>

int main() {
  
  int k = 2000;
  int* ptr = &k;
  
  // Checkpoint 1 code goes here.
  printf("%i\n", *ptr);
  // Checkpoint 2 code goes here.
  *ptr = 961;
  printf("%i\n", k); // Notice how variable k changed value after Checkpoint 2!
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------
















































































































